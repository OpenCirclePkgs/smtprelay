name: Build and Push Docker Container

on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'  # Run every day

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout original repository
      uses: actions/checkout@v4
      with:
        repository: decke/smtprelay
        path: external_repo
        
    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        path: local_repo

    - name: debug
      run: ls

    - name: Setup QEMU for ARM64
      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Get current release from container repository
      run: |
        repo_owner="OpenCirclePkgs"
        repo_name="smtprelay"
        package_type="container"
        package_name="smtprelay"

        current_release=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/orgs/$repo_owner/packages/$package_type/$package_name" | jq -r .metadata.container.tags[0].name)

        # Set to empty string if no container exists yet
        current_release=${current_release:-""}

        echo "Current release in the container repository: $current_release"

    - name: Check for new releases
      run: |
        latest_release=$(curl -s https://api.github.com/repos/decke/smtprelay/releases/latest | jq -r '.tag_name')
        echo "latest release: $latest_release"

        if [ "$latest_release" != "$current_release" ]; then
          echo "New release found. Building and pushing Docker container..."
        else
          echo "No new releases found. Exiting."
          exit 1
        fi

    - name: Create downloaded_files
      run: mkdir downloaded_files

    - name: Download files from latest release
      run: |
        latest_release=$(curl -s https://api.github.com/repos/decke/smtprelay/releases/latest | jq -r '.tag_name')
        echo "Latest release: $latest_release"       

        #debug
        echo "https://github.com/decke/smtprelay/releases/download/$latest_release/smtprelay-$latest_release-linux-arm64.tar.gz"
        echo "https://github.com/decke/smtprelay/releases/download/$latest_release/smtprelay-$latest_release-linux-amd64.tar.gz"
        
        # Download files from the latest release using the GitHub REST API
        curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        -o "smtprelay-$latest_release-linux-arm64.tar.gz" \
        -LO "https://github.com/decke/smtprelay/releases/download/$latest_release/smtprelay-$latest_release-linux-arm64.tar.gz" \
        -LO "https://github.com/decke/smtprelay/releases/download/$latest_release/smtprelay-$latest_release-linux-amd64.tar.gz" \
        -o "smtprelay-$latest_release-linux-amd64.tar.gz" \

        tar -xzf smtprelay-$latest_release-linux-arm64.tar.gz -C arm64
        tar -xzf smtprelay-$latest_release-linux-amd64.tar.gz -C amd64
        
      working-directory: downloaded_files

    - name: Build and Push Docker Container (AMD64)
      uses: docker/build-push-action@v2
      with:
        platforms: linux/amd64
        push: true
        file: Dockerfile-amd64
        context: ./downloaded_files/
        tags: |
          latest-amd64, $latest_release-amd64

    - name: Build and Push Docker Container (ARM64)
      uses: docker/build-push-action@v2
      with:
        platforms: linux/arm64
        push: true
        file: Dockerfile-arm64
        context: ./downloaded_files/
        tags: |
          latest-arm64, $latest_release-arm64
